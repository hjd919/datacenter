// Code generated by protoc-gen-go. DO NOT EDIT.
// source: taizhang.proto

package taizhang

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//请求的api
type TaizhangReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaizhangReq) Reset()         { *m = TaizhangReq{} }
func (m *TaizhangReq) String() string { return proto.CompactTextString(m) }
func (*TaizhangReq) ProtoMessage()    {}
func (*TaizhangReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9f440e6c3e4740, []int{0}
}

func (m *TaizhangReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaizhangReq.Unmarshal(m, b)
}
func (m *TaizhangReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaizhangReq.Marshal(b, m, deterministic)
}
func (m *TaizhangReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaizhangReq.Merge(m, src)
}
func (m *TaizhangReq) XXX_Size() int {
	return xxx_messageInfo_TaizhangReq.Size(m)
}
func (m *TaizhangReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TaizhangReq.DiscardUnknown(m)
}

var xxx_messageInfo_TaizhangReq proto.InternalMessageInfo

func (m *TaizhangReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//返回的值
type TaizhangResp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Appid                string   `protobuf:"bytes,2,opt,name=appid,proto3" json:"appid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TaizhangResp) Reset()         { *m = TaizhangResp{} }
func (m *TaizhangResp) String() string { return proto.CompactTextString(m) }
func (*TaizhangResp) ProtoMessage()    {}
func (*TaizhangResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd9f440e6c3e4740, []int{1}
}

func (m *TaizhangResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TaizhangResp.Unmarshal(m, b)
}
func (m *TaizhangResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TaizhangResp.Marshal(b, m, deterministic)
}
func (m *TaizhangResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TaizhangResp.Merge(m, src)
}
func (m *TaizhangResp) XXX_Size() int {
	return xxx_messageInfo_TaizhangResp.Size(m)
}
func (m *TaizhangResp) XXX_DiscardUnknown() {
	xxx_messageInfo_TaizhangResp.DiscardUnknown(m)
}

var xxx_messageInfo_TaizhangResp proto.InternalMessageInfo

func (m *TaizhangResp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TaizhangResp) GetAppid() string {
	if m != nil {
		return m.Appid
	}
	return ""
}

func init() {
	proto.RegisterType((*TaizhangReq)(nil), "taizhang.TaizhangReq")
	proto.RegisterType((*TaizhangResp)(nil), "taizhang.TaizhangResp")
}

func init() { proto.RegisterFile("taizhang.proto", fileDescriptor_dd9f440e6c3e4740) }

var fileDescriptor_dd9f440e6c3e4740 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x49, 0xcc, 0xac,
	0xca, 0x48, 0xcc, 0x4b, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x64,
	0xb9, 0xb8, 0x43, 0xa0, 0xec, 0xa0, 0xd4, 0x42, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xe6, 0x20, 0xa6, 0xcc, 0x14, 0x25, 0x13, 0x2e, 0x1e, 0x84, 0x74, 0x71, 0x01,
	0xba, 0xbc, 0x90, 0x08, 0x17, 0x6b, 0x62, 0x41, 0x41, 0x66, 0x8a, 0x04, 0x93, 0x02, 0xa3, 0x06,
	0x67, 0x10, 0x84, 0x63, 0xe4, 0xc1, 0xc5, 0x01, 0xd3, 0x25, 0x64, 0xc3, 0xc5, 0xed, 0x9e, 0x5a,
	0x02, 0xe7, 0x8a, 0xea, 0xc1, 0x9d, 0x82, 0x64, 0xaf, 0x94, 0x18, 0x36, 0xe1, 0xe2, 0x82, 0x24,
	0x36, 0xb0, 0x7b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7c, 0xe3, 0xca, 0xa0, 0xc1, 0x00,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TaizhangClient is the client API for Taizhang service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TaizhangClient interface {
	GetTaizhang(ctx context.Context, in *TaizhangReq, opts ...grpc.CallOption) (*TaizhangResp, error)
}

type taizhangClient struct {
	cc *grpc.ClientConn
}

func NewTaizhangClient(cc *grpc.ClientConn) TaizhangClient {
	return &taizhangClient{cc}
}

func (c *taizhangClient) GetTaizhang(ctx context.Context, in *TaizhangReq, opts ...grpc.CallOption) (*TaizhangResp, error) {
	out := new(TaizhangResp)
	err := c.cc.Invoke(ctx, "/taizhang.Taizhang/GetTaizhang", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaizhangServer is the server API for Taizhang service.
type TaizhangServer interface {
	GetTaizhang(context.Context, *TaizhangReq) (*TaizhangResp, error)
}

// UnimplementedTaizhangServer can be embedded to have forward compatible implementations.
type UnimplementedTaizhangServer struct {
}

func (*UnimplementedTaizhangServer) GetTaizhang(ctx context.Context, req *TaizhangReq) (*TaizhangResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaizhang not implemented")
}

func RegisterTaizhangServer(s *grpc.Server, srv TaizhangServer) {
	s.RegisterService(&_Taizhang_serviceDesc, srv)
}

func _Taizhang_GetTaizhang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaizhangReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaizhangServer).GetTaizhang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/taizhang.Taizhang/GetTaizhang",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaizhangServer).GetTaizhang(ctx, req.(*TaizhangReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Taizhang_serviceDesc = grpc.ServiceDesc{
	ServiceName: "taizhang.Taizhang",
	HandlerType: (*TaizhangServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTaizhang",
			Handler:    _Taizhang_GetTaizhang_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "taizhang.proto",
}
